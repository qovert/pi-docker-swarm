---
- name: Manage SSH authorized_keys based on host function
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Base directory for SSH keys
    ssh_keys_dir: "{{ playbook_dir }}/ssh_keys"

    # Default SSH directory and authorized_keys file
    ssh_dir: "/home/{{ ansible_user }}/.ssh"
    authorized_keys_file: "{{ ssh_dir }}/authorized_keys"

    # SSH keys mapping by function
    ssh_keys_by_function:
      web:
        - "{{ ssh_keys_dir }}/admin_team.pub"
        - "{{ ssh_keys_dir }}/web_team.pub"
        - "{{ ssh_keys_dir }}/monitoring.pub"

      database:
        - "{{ ssh_keys_dir }}/admin_team.pub"
        - "{{ ssh_keys_dir }}/dba_team.pub"
        - "{{ ssh_keys_dir }}/backup_service.pub"
        - "{{ ssh_keys_dir }}/monitoring.pub"

      application:
        - "{{ ssh_keys_dir }}/admin_team.pub"
        - "{{ ssh_keys_dir }}/dev_team.pub"
        - "{{ ssh_keys_dir }}/deploy_service.pub"
        - "{{ ssh_keys_dir }}/monitoring.pub"

      monitoring:
        - "{{ ssh_keys_dir }}/admin_team.pub"
        - "{{ ssh_keys_dir }}/monitoring_team.pub"
        - "{{ ssh_keys_dir }}/monitoring.pub"

      bastion:
        - "{{ ssh_keys_dir }}/admin_team.pub"
        - "{{ ssh_keys_dir }}/all_users.pub"

      cluster:
        - "{{ ssh_keys_dir }}/all_users.pub"
        - "{{ ssh_keys_dir }}/cluster_nodes.pub"

  tasks:
    - name: Ensure SSH directory exists
      ansible.builtin.file:
        path: "{{ ssh_dir }}"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Get current authorized_keys content
      ansible.builtin.slurp:
        src: "{{ authorized_keys_file }}"
      register: current_authorized_keys
      failed_when: false

    - name: Create backup of current authorized_keys
      ansible.builtin.copy:
        src: "{{ authorized_keys_file }}"
        dest: "{{ authorized_keys_file }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: true
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: current_authorized_keys.content is defined

    - name: Read SSH public keys for this host function
      ansible.builtin.set_fact:
        ssh_public_keys: "{{ ssh_public_keys | default([]) + [lookup('file', item)] }}"
      loop: "{{ ssh_keys_by_function[host_function] | default([]) }}"
      delegate_to: localhost
      run_once: false

    - name: Display keys being added for this host function
      ansible.builtin.debug:
        msg: "Adding {{ ssh_public_keys | length }} SSH keys for {{ host_function }} servers"

    - name: Ensure authorized_keys file exists with proper permissions
      ansible.builtin.file:
        path: "{{ authorized_keys_file }}"
        state: touch
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Add SSH public keys to authorized_keys
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ item }}"
        comment: "Added by Ansible - {{ host_function }} function"
      loop: "{{ ssh_public_keys | default([]) }}"
      when: ssh_public_keys is defined

    - name: Remove old keys that are no longer needed (optional)
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: absent
        key: "{{ item }}"
      loop: "{{ keys_to_remove | default([]) }}"
      when: keys_to_remove is defined

    - name: Verify authorized_keys file permissions
      ansible.builtin.file:
        path: "{{ authorized_keys_file }}"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Display final authorized_keys status
      ansible.builtin.debug:
        msg: "SSH keys updated for {{ inventory_hostname }} ({{ host_function }} function)"
