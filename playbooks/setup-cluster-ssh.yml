---
- name: Setup passwordless SSH between cluster nodes
  hosts: cluster_nodes
  become: true
  gather_facts: true

  vars:
    ssh_key_type: ed25519
    ssh_key_file: "/home/{{ ansible_user }}/.ssh/id_{{ ssh_key_type }}"
    ssh_pub_key_file: "{{ ssh_key_file }}.pub"
    root_ssh_key_file: "/root/.ssh/id_{{ ssh_key_type }}"
    root_ssh_pub_key_file: "{{ root_ssh_key_file }}.pub"

  tasks:
    - name: Ensure SSH directory exists
      file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Check if SSH key already exists
      stat:
        path: "{{ ssh_key_file }}"
      register: ssh_key_stat

    - name: Generate ed25519 SSH key pair if not exists
      command: >
        ssh-keygen -t {{ ssh_key_type }} 
        -f {{ ssh_key_file }} 
        -N "" 
        -C "{{ ansible_user }}@{{ inventory_hostname }}"
      become_user: "{{ ansible_user }}"
      when: not ssh_key_stat.stat.exists

    - name: Set proper permissions on private key
      file:
        path: "{{ ssh_key_file }}"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Set proper permissions on public key
      file:
        path: "{{ ssh_pub_key_file }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Read public key content
      slurp:
        src: "{{ ssh_pub_key_file }}"
      register: public_key_content

    - name: Add other nodes' public keys to authorized_keys
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ hostvars[item]['public_key_content']['content'] | b64decode | trim }}"
        comment: "Cluster node {{ item }} - generated by Ansible"
      loop: "{{ groups['cluster_nodes'] | difference([inventory_hostname]) }}"
      when: hostvars[item]['public_key_content'] is defined

    - name: Test SSH connectivity to other cluster nodes
      command: >
        ssh -o StrictHostKeyChecking=no 
        -o ConnectTimeout=5 
        -o BatchMode=yes
        {{ ansible_user }}@{{ item }} 'echo "SSH connection successful from {{ inventory_hostname }} to {{ item }}"'
      loop: "{{ groups['cluster_nodes'] | difference([inventory_hostname]) }}"
      register: ssh_test_results
      changed_when: false
      failed_when: ssh_test_results.rc != 0
      become_user: "{{ ansible_user }}"
      become: false

    - name: Display SSH connectivity verification
      debug:
        msg: "✅ Passwordless SSH verified: {{ inventory_hostname }} → {{ item.item }}"
      loop: "{{ ssh_test_results.results }}"
      when: item.rc == 0
      loop_control:
        label: "{{ item.item }}"

    # =============================================================================
    # Root SSH Setup for Syncoid (ZFS operations require root access)
    # =============================================================================
    
    - name: Ensure root SSH directory exists
      file:
        path: "/root/.ssh"
        state: directory
        mode: '0700'
        owner: "root"
        group: "root"

    - name: Check if root SSH key already exists
      stat:
        path: "{{ root_ssh_key_file }}"
      register: root_ssh_key_stat

    - name: Generate ed25519 SSH key pair for root if not exists
      command: >
        ssh-keygen -t {{ ssh_key_type }} 
        -f {{ root_ssh_key_file }} 
        -N "" 
        -C "root@{{ inventory_hostname }}"
      when: not root_ssh_key_stat.stat.exists

    - name: Set proper permissions on root private key
      file:
        path: "{{ root_ssh_key_file }}"
        mode: '0600'
        owner: "root"
        group: "root"

    - name: Set proper permissions on root public key
      file:
        path: "{{ root_ssh_pub_key_file }}"
        mode: '0644'
        owner: "root"
        group: "root"

    - name: Read root public key content
      slurp:
        src: "{{ root_ssh_pub_key_file }}"
      register: root_public_key_content

    - name: Add other nodes' root public keys to root authorized_keys
      authorized_key:
        user: "root"
        state: present
        key: "{{ hostvars[item]['root_public_key_content']['content'] | b64decode | trim }}"
        comment: "Root cluster node {{ item }} - generated by Ansible"
      loop: "{{ groups['cluster_nodes'] | difference([inventory_hostname]) }}"
      when: hostvars[item]['root_public_key_content'] is defined

    - name: Test root SSH connectivity to other cluster nodes
      command: >
        ssh -o StrictHostKeyChecking=no 
        -o ConnectTimeout=5 
        -o BatchMode=yes
        root@{{ item }} 'echo "Root SSH connection successful from {{ inventory_hostname }} to {{ item }}"'
      loop: "{{ groups['cluster_nodes'] | difference([inventory_hostname]) }}"
      register: root_ssh_test_results
      changed_when: false
      failed_when: root_ssh_test_results.rc != 0

    - name: Display root SSH connectivity verification
      debug:
        msg: "✅ Root passwordless SSH verified: {{ inventory_hostname }} → {{ item.item }}"
      loop: "{{ root_ssh_test_results.results }}"
      when: item.rc == 0
      loop_control:
        label: "{{ item.item }}"
