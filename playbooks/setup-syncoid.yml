---
- name: Setup Syncoid for ZFS Dataset Synchronization
  hosts: cluster_nodes
  become: true
  gather_facts: true

  tasks:
    - name: Load services configuration
      include_vars: "{{ playbook_dir }}/../services.yml"
      delegate_to: localhost
      run_once: true

    - name: Install syncoid (sanoid package)
      apt:
        name: sanoid
        state: present
        update_cache: true

    - name: Create syncoid configuration directory
      file:
        path: /etc/sanoid
        state: directory
        mode: '0755'

    - name: Create syncoid configuration
      copy:
        dest: /etc/sanoid/sanoid.conf
        mode: '0644'
        content: |
          # Sanoid configuration for ZFS snapshots and syncoid
          # Generated by Ansible - do not edit manually
          
          [tank/komga]
          use_template = production
          
          [template_production]
          frequently = 4
          hourly = 24
          daily = 7
          monthly = 3
          yearly = 0
          autosnap = yes
          autoprune = yes

    - name: Create syncoid sync scripts for each service
      copy:
        dest: "/usr/local/bin/sync-{{ item.key }}.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          # Syncoid synchronization script for {{ item.key }}
          # Generated by Ansible - do not edit manually
          
          set -euo pipefail
          
          SOURCE_DATASET="{{ item.value.zfs_dataset.name }}"
          LOG_FILE="/var/log/syncoid-{{ item.key }}.log"
          
          echo "$(date): Starting sync for {{ item.key }}" >> "$LOG_FILE"
          
          # Create initial snapshot if none exists
          if ! zfs list -t snapshot "$SOURCE_DATASET" >/dev/null 2>&1 || [ "$(zfs list -t snapshot -o name -H "$SOURCE_DATASET" | wc -l)" -eq 0 ]; then
              echo "$(date): Creating initial snapshot for $SOURCE_DATASET" >> "$LOG_FILE"
              zfs snapshot "$SOURCE_DATASET@initial-$(date +%Y%m%d-%H%M%S)" >> "$LOG_FILE" 2>&1
          fi
          
          {% for target_host in groups['cluster_nodes'] %}
          {% if target_host != inventory_hostname %}
          if ping -c 1 {{ target_host }} >/dev/null 2>&1; then
              echo "$(date): Syncing to {{ target_host }}" >> "$LOG_FILE"
              
              # Check if target exists and has no matching snapshots - handle initial sync
              if ssh -o StrictHostKeyChecking=no root@{{ target_host }} "zfs list $SOURCE_DATASET >/dev/null 2>&1"; then
                  # Target exists, check if it has matching snapshots
                  TARGET_SNAPSHOTS=$(ssh -o StrictHostKeyChecking=no root@{{ target_host }} "zfs list -t snapshot -o name -H $SOURCE_DATASET 2>/dev/null | wc -l" || echo "0")
                  SOURCE_SNAPSHOTS=$(zfs list -t snapshot -o name -H "$SOURCE_DATASET" 2>/dev/null | wc -l || echo "0")
                  
                  if [ "$TARGET_SNAPSHOTS" -eq 0 ] && [ "$SOURCE_SNAPSHOTS" -gt 0 ]; then
                      echo "$(date): Target exists but has no snapshots, performing initial sync" >> "$LOG_FILE"
                      # Get the oldest snapshot for initial sync
                      OLDEST_SNAP=$(zfs list -t snapshot -o name -H "$SOURCE_DATASET" | head -1)
                      /usr/sbin/syncoid \
                          --identifier="{{ item.key }}-sync" \
                          --no-privilege-elevation \
                          --force-delete \
                          "$OLDEST_SNAP" \
                          "root@{{ target_host }}:$SOURCE_DATASET" \
                          >> "$LOG_FILE" 2>&1 || echo "$(date): Failed initial sync to {{ target_host }}" >> "$LOG_FILE"
                  else
                      # Regular incremental sync
                      /usr/sbin/syncoid \
                          --identifier="{{ item.key }}-sync" \
                          --no-privilege-elevation \
                          "$SOURCE_DATASET" \
                          "root@{{ target_host }}:$SOURCE_DATASET" \
                          >> "$LOG_FILE" 2>&1 || echo "$(date): Failed to sync to {{ target_host }}" >> "$LOG_FILE"
                  fi
              else
                  # Target doesn't exist, create it with initial sync
                  echo "$(date): Target doesn't exist, creating with initial sync" >> "$LOG_FILE"
                  /usr/sbin/syncoid \
                      --identifier="{{ item.key }}-sync" \
                      --no-privilege-elevation \
                      "$SOURCE_DATASET" \
                      "root@{{ target_host }}:$SOURCE_DATASET" \
                      >> "$LOG_FILE" 2>&1 || echo "$(date): Failed to create target on {{ target_host }}" >> "$LOG_FILE"
              fi
          else
              echo "$(date): {{ target_host }} unreachable, skipping" >> "$LOG_FILE"
          fi
          {% endif %}
          {% endfor %}
          
          echo "$(date): Sync completed for {{ item.key }}" >> "$LOG_FILE"
      loop: "{{ services | dict2items }}"
      when:
        - item.value.enabled | default(false)
        - item.value.syncoid is defined
        - item.value.syncoid.enabled | default(false)

    - name: Check if initial snapshot exists for syncoid datasets
      shell: "zfs list -t snapshot {{ item.value.zfs_dataset.name }}@initial 2>/dev/null"
      loop: "{{ services | dict2items }}"
      when:
        - item.value.enabled | default(false)
        - item.value.syncoid is defined
        - item.value.syncoid.enabled | default(false)
        - item.value.zfs_dataset is defined
      register: initial_snapshot_check
      failed_when: false  # Don't fail if snapshot doesn't exist
      changed_when: false  # This is just a check
      loop_control:
        label: "{{ item.key }}"

    - name: Create initial snapshots for syncoid datasets (only if missing)
      shell: "zfs snapshot {{ item.value.zfs_dataset.name }}@initial"
      loop: "{{ services | dict2items }}"
      when:
        - item.value.enabled | default(false)
        - item.value.syncoid is defined
        - item.value.syncoid.enabled | default(false)
        - item.value.zfs_dataset is defined
        - initial_snapshot_check.results[ansible_loop.index0].rc != 0  # Only if snapshot doesn't exist
      loop_control:
        label: "{{ item.key }}"
        extended: true

    - name: Create cron jobs for syncoid
      cron:
        name: "syncoid-{{ item.key }}"
        minute: "{{ item.value.syncoid.sync_interval.split(' ')[0] }}"
        hour: "{{ item.value.syncoid.sync_interval.split(' ')[1] }}"
        day: "{{ item.value.syncoid.sync_interval.split(' ')[2] }}"
        month: "{{ item.value.syncoid.sync_interval.split(' ')[3] }}"
        weekday: "{{ item.value.syncoid.sync_interval.split(' ')[4] }}"
        job: "/usr/local/bin/sync-{{ item.key }}.sh"
        user: root
        state: present
      loop: "{{ services | dict2items }}"
      when:
        - item.value.enabled | default(false)
        - item.value.syncoid is defined
        - item.value.syncoid.enabled | default(false)

    - name: Create log rotation for syncoid logs
      copy:
        dest: /etc/logrotate.d/syncoid
        content: |
          /var/log/syncoid-*.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 644 root root
          }

    - name: Verify SSH connectivity for syncoid (using existing SSH setup)
      command: "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@{{ item }} 'echo Syncoid SSH test successful'"
      loop: "{{ groups['cluster_nodes'] | difference([inventory_hostname]) }}"
      register: final_ssh_test
      ignore_errors: true
      changed_when: false

    - name: Display final SSH connectivity status
      debug:
        msg: "{{ 'SSH to ' + item.item + ': SUCCESS ✅' if item.rc == 0 else 'SSH to ' + item.item + ': FAILED ❌' }}"
      loop: "{{ final_ssh_test.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Setup sanoid cron job for snapshots
      cron:
        name: "sanoid-snapshots"
        minute: "*"
        hour: "*"
        day: "*"
        month: "*"
        weekday: "*"
        job: "TZ=UTC /usr/sbin/sanoid --cron"
        user: root
        state: present

    - name: Display syncoid setup summary
      debug:
        msg:
          - "=== Syncoid Setup Complete ==="
          - "Services with sync enabled: {{ services | dict2items | selectattr('value.syncoid.enabled', 'defined') | selectattr('value.syncoid.enabled') | list | length }}"
          - "Sync scripts created in /usr/local/bin/"
          - "Logs available in /var/log/syncoid-*.log"
          - "Sanoid snapshots running via cron every minute"
